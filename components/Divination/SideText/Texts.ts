export const texts = {
  title:["1 - 配列","2 - 条件分岐"],
  page:{
    0:{
      upper:[
        "今から、おみくじのプログラムを作成します。",
        "今の状態では、ボタンを押した後『吉』のみが表示されます。",
        "おみくじプログラムは『複数ある運勢のうち一つをランダムで表示する』という物にしたいと考えています。"
      ],
      lower:[
        "複数の運勢の内から一つ、選ぶ為の方法として『配列』を利用します。",
        "一度プログラムの方を見てみましょう。"
      ]
    },
    1:{
      upper:[
        "配列は、同一の型のデータを位置列に並べた構造をしており、格納した複数のデータを一つの変数まとめて使用する事ができます。",
        "配列という構造を利用する事で、コードの記述量が減ったり、配列に備わっている便利な関数を使う事ができます。"
      ],
      lower:[
        "例として『あ』から『お』の5文字を一つずつ変数として用意した場合、『5文字』という個数を数えたい時にどうするでしょうか？",
      ]
    },
    2:{
      upper:[
        "配列構造であれば『.length』という関数を利用する事で配列内の要素数を返してくれます。",
        "配列構造は『[ ]』内に追加された要素に対してインデックスがセットで付いており、それを返す事で個数を数える事ができます。",
        "配列の中から、要素の一つを取り出す時も、この要素に対して付いているインデックスを利用します。"
      ],
      lower:[
        "『変数名+[ indexの番号 ]』で特定の要素を取り出したり、変更ができます。",
        "この機能を利用して、おみくじの機能を実装してみましょう。"
      ]
    },
    3:{
      upper:[
        "おみくじのプログラムの要件としては、問題なく実装ができました。",
        "次は条件に応じて見た目の部分を変えてみましょう。",
        "今回は『悪い運勢を引いた時に、寒色の文字で表示する』という仕様を実装しましょう。"
      ],
      lower:[
        "まずはプログラム内での条件を考えてみましょう。"
      ]
    },
    4:{
      upper:[
        "プログラムで条件分岐をする際は、『if-else』構文を利用します。",
        "『if』の後に入れた条件を満たす場合であれば、if以降の処理を行い、条件を満たさない場合はelse以降の処理を行なってから(elseが無ければそのまま)if-else構文を抜けます。"
      ],
      lower:[
        "では、実際にif-elseを用いてプログラムを書いてみましょう。"
      ]
    },
    5:{
      upper:[
        "正しくうらないプログラムは動きましたか？",
        "動かなければ、一つずつ見直して、エラーを消していきましょう。",
        "ここまで、プログラミングの基本的なコードの理解を深めて貰いましたが、これはコードを書く言語によって書き方がさまざまに変化します。注意してください。",
      ],
      lower:[
        "次はクイズを作成します。コードを書いてもらうというよりは、パーツを組み建てるというイメージです。",
        
      ]
    }
  }
}